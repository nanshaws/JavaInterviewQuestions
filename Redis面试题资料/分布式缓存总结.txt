一、数据持久化（保证数据不丢失）
	1、RDB
		1）、周期性的将数据库中的数据做一次内存快照(dump.rdb)，默认是开启的
		2）、触发时机：
				save：关机时会save一次，会阻塞主线程，影响效率。
				bgsave：与配置有关：save m n，当m秒内有n个key发生修改会触发，后台会fork出一个子线程完成快照。
		3）、优缺点：
			优点：由于快照是二进制的，所以加载速度很快
			缺点：由于快照的时间间隔比较长，所以有可能会丢失大量数据
		
	2、AOF
		1）、将redis数据以 操作 + 数据的命令形式存在日志文件中(appendonly.aof)，默认是关闭的
		2）、AOF的三个阶段：
			1、命令写入缓冲区
			2、文件命令同步（刷盘策略）
				1）、always 
				2）、everyseconds
				3）、no
			3、文件重写
				1）、重写的时机？
					1、文件大小超过64M
					2、跟上次文件大小相比，增长比例超过100%，也就是原来的2倍
				2）、重写干了什么？
					删除没用的命令、合并多条命令以缩小文件大小
		
		3）、优缺点：
			优点：数据实时性高，不易丢失数据
			缺点：加载速度慢，文件体积大
		
	3、RDB-AOF

二、主从同步（提高并发读写效率）
	1、主负责写，从负责读
	2、主从同步命令：slaveof master-ip master-port
		1）、建立连接
		2）、数据同步（全量同步【应该尽量避免】、增量同步）
		3）、命令传播

三、哨兵机制（故障转移）
	核心：
		1、监控：3个心跳
				10秒一次：更新redis主从最新的一个拓补情况
				3秒一次：用于Sentinel哨兵节点之间交流对redis数据节点的看法
				1秒一次：用于发出ping，检测redis节点是否还存活（主观下线、客观下线）
		2、通知：用于master发生了变动，将变化推送给客户端
		3、故障转移：当对主节点进行客观下线后，选举出一个新的主节点，并且将其他节点连接上新的主节点，最后将原来的master标记为从结点

四、分片集群（主要是扩容，其他特性也都具备）
	扩容核心：
		1、插槽机制（一共有16384个槽）
			对Key的有效部分进行运算产生hash值，再拿hash对16384进行取余，余数是多少，所属的槽就是哪个
		2、集群伸缩
	其他的特性也都具备（如：故障转移等【自动故障转移、手动故障转移】）